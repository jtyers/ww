# watch implemented as a zsh function
#
# MIT License
#
# Copyright (c) 2020 Jonny Tyers
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

function __ww_die() {
  echo "$@" >&2
  echo 1
}

# usage: watch [-n interval|-w] [--] cmd
function __ww() {
  WW_VERSION=0.0.1

  function _echo() {
    [ $quiet -eq 1 ] && return
    echo "$@"
  }

  function _tput() {
    [ $quiet -eq 1 ] && return
    tput "$@"
  }

  # usage: <fgcolor> <bgcolor> <text>
  function printColouredString() {
    [ $quiet -eq 1 ] && return

    local fgcolor="$1"
    local bgcolor="$2"
    local text="$3"

    colsLeft=$(($cols - ${#text}))

    printf "$fg[$fgcolor]$bg[$bgcolor]" >&2
    printf "$text" >&2
    printf ' %.0s' {1..$colsLeft}
    printf "$reset_color" >&2

    _tput el # clear to end of line
    printf '\n'
  }

  read -r -d '' usage <<EOF
ww - a better watch

Version $WW_VERSION
https://github.com/jtyers/ww
Written by Jonny Tyers

USAGE
  ww [opts] [--] CMD

  --once, -1
    quit after CMD finishes successfully (exit code 0)

  --color, --colour, -c WORD
    highlight instances of WORD in output (can be repeated)

  --interval, -n N
    refresh every N seconds (ignored if -w is specified)

  --watch, -w
    refresh when files in the current directory are changed
    (requires inotifywatch to be installed)

  --watch-wait, -W SECONDS
    when --watch is used, ww will wait a short period after a
    change is detected to allow related I/O operations to complete
    (default: 0.25)

  --no-capture, -N
    allow underlying command to print straight to terminal rather
    than capturing output (used for slower commands, such as find,
    tail -f, etc; in this mode, --color has no effect)

  --until, -u
    wait until CMD has run successfully, then quit (this is just an
    alias for '--no-capture --once')

  --quiet, -q
    suppress output (both of ww and CMD; only affects standard output of CMD,
    any errors are still printed)

If WW_DEFAULT_ARGS is set, this can contain default arguments, processed before command line arguments on every invocation.

You can use any shell expansions or aliases in CMD, but remember to escape special characters (see EXAMPLES below).

Examples:
  ww df -h   # run df -h every 10 seconds

  # run 'go test' every 2 seconds, grepping for FAILED
  # (note the escaped pipe character)
  ww -n 2 -- go test \| grep FAILED

  # run 'go test' every time files in the current directory
  # are changed
  ww -w -- go test

  # run 'ls ~/foo' continuously, if it fails, retry after 5 seconds, exit when it succeeds
  ww -u -n 5 -- ls ~/foo
EOF

  interval=10
  quiet=0
  once=0
  capture=1
  colour=""
  watch=0
  watch_wait=0.25
  inotifycmd=$(which inotifywait)
  watch_cmd="$inotifycmd -r -e modify -e close_write -e move -e move_self -e create -e delete -e delete_self -e unmount --exclude '\.git/.*' ."

  # If -- was specified on the cmdline:
  # Pull out the args intended for ww versus the args for the command.
  # getopt cannot do this for us as the getopt command line already contains
  # '--' (to separate opts to getopt from the params to parse). After this
  # loop completes, $args will be an array of args to ww, and $@ will contain
  # the remaining args for the command.
  #
  args=()
  while :; do
    if [[ "$1" == "--" ]]; then
      shift
      break
    fi

    args+="$1"
    shift

    if [ $# -eq 0 ]; then
      break
    fi
  done

  cmdtorun="${@[@]}"

  O=$(
    getopt \
    -n ww \
    -l help,no-capture,color:colour:interval:,once,watch,watch-wait,until,quiet \
    -o hNc:n:1wWuq -- "${args[@]}" \
  ) || return $(__ww_die "$usage")
  eval set -- "$WW_DEFAULT_ARGS" "$O"
  while true; do
      case "$1" in
      -h|--help)            echo "$usage"; return 0 ;;
      -c|--color|--colour)	colour="$colour|${2}"; shift; shift; ;;
      -n|--interval)	      interval="$2"; shift; shift; ;;
      -1|--once)	          once=1; shift; ;;
      -N|--no-capture)	    capture=0; shift; ;;
      -w|--watch)	          watch=1; shift; ;;
      -W|--watch-wait)	    watch_wait="$1"; shift; shift; ;;
      -u|--until)	          capture=0; once=1; shift; ;;
      -q|--quiet)	          quiet=1; capture=0; shift; ;; # -q implies -N
      --)			              shift; break;;
      *)			              return $(__ww_die "$usage");;
      esac
  done

  # If -- was NOT specified on the cmdline, at this point $args will contain
  # all the args (ww args and command args) and $@ will be empty.
  if [ $# -gt 0 ]; then
    cmdtorun="${@[@]}"
  fi

  if [ $capture -eq 0 ] && [ -n "$colour" ]; then
    _echo "warning: --color has no effect when --no-capture is used" >&2
  fi

  if [ $watch -eq 1 ]; then
    [ -z "$inotifycmd" ] && return $(__ww_die "inotifywatch not found: make sure it is installed and on your PATH")
  fi

  cols=$(tput cols)
  lines=$(tput lines)
  ret=0

  while true; do
    # re-evaluate on every run in case terminal has been resized
    cols=$(tput cols)
    lines=$(tput lines)

    fgcol="black"
    bgcol="white"

    printColouredString "black" "white" "\`$cmdtorun\` running"
    _tput cup 0 0 # move cursor to 0,0

    if [ $capture -eq 0 ]; then
      # no capture = run command and allow it to print direct to the terminal
      # ...in this mode no filtering/colouring will work
      _tput clear
      printColouredString "$fgcol" "$bgcol" "\`$cmdtorun\` running in $interval secs"
      _echo "" >&2

      # if -q is specified, $capture is 0, so check here whether to suppress output
      if [ $quiet -eq 1 ]; then
        eval $cmdtorun > /dev/null
        ret=$?

      else
        eval $cmdtorun
        ret=$?
      fi

    else
      # https://stackoverflow.com/a/981831/1432488
      if [ -n "$colour" ]; then
        _output=$(eval $cmdtorun 2>&1)
        ret=$?
        output=$(grep -i --color=always -E "${colour}|$"<<<"$_output")

      else
        output=$(eval $cmdtorun 2>&1)
        ret=$?
      fi

      if [ $ret -eq 0 ]; then
        bgcol="green"
      else
        bgcol="red"
      fi

      _tput clear
      printColouredString "$fgcol" "$bgcol" "\`$cmdtorun\` running in $interval secs"
      _echo "" >&2
      _echo "$output" >&2
    fi

    [ $ret -eq 0 ] && [ $once -eq 1 ] && break;

    _tput cup 0 0 # move cursor to 0,0

    if [ $watch -eq 1 ]; then
      printColouredString "$fgcol" "$bgcol" "\`$cmdtorun\` watching for changes..."
      _tput cup 0 0 # move cursor to 0,0
      eval "$watch_cmd" &>/dev/null

      # after a watch returns, wait a defined amount of time to allow for writes to complete etc
      # (and handle the case where the write we detect is in fact one of several files being
      # written by another process)
      sleep $watch_wait

    else
      cur=${interval}
      while [ $cur -gt 0 ]; do
        printColouredString "$fgcol" "$bgcol" "\`$cmdtorun\` running in $cur secs"
        _tput cup 0 0 # move cursor to 0,0

        sleep 1
        (( cur-- ))
      done
    fi
  done
}

alias ww='__ww'
